)
dim(cl)
dim(cl)
glimpse(cl)
cl[ 150:350, ]
cl[ 750:850, ]
hist(cl$nu)
hist(cl$x)
hist(cl$class_id)
hist(cl$epsilon)
hist(cl$y)
summary(cl$y)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
##############
# Parameters #
##############
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(n = students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = rep(c(1:classrooms), each = students),
# student error
epsilon = rnorm(n = students * classrooms, 0, 2),
# outcome variable
y = x + nu + epsilon
)
jead(cl)
head(cl)
cl %>% print(n = 400)
cl$x + cl$nu + cl$epsilon
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
##############
# Parameters #
##############
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = rep(c(1:classrooms), each = students),
# student error
epsilon = rnorm(students * classrooms, 0, 2),
# outcome variable
y = x + nu + epsilon
)
head(cl)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
##############
# Parameters #
##############
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = rep(c(1:classrooms), each = students),
# student error
epsilon = rnorm(students * classrooms, 0, 2),
) %>% mutate(y = x + nu + epsilon)
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = rep(c(1:classrooms), each = students),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
head(cl)
head(cl)
head(cl)
hist(cl$nu)
summary(cl$nu)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
##############
# Parameters #
##############
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = rep(c(1:classrooms), each = students),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
head(cl)
head(cl, 50)
cl[150:250, ]
cl[950:1050, ]
cl[17050:18050, ]
summary(cl)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
##############
# Parameters #
##############
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
class_id = as.factor(rep(c(1:classrooms), each = students)),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
?glimpse
glimpse(cl)
str(cl)
head(cl)
cl$x + cl$nu + cl$epsilon
cl$x + cl$nu + cl$epsilon - cl$y
unique(cl$x + cl$nu + cl$epsilon - cl$y)
table(cl$x + cl$nu + cl$epsilon - cl$y)
table(cl$class_id)
hist(cl$x)
hist(cl$nu)
hist(cl$epsilon)
lmer(y ~ x + (1 | class_id), data = cl)
getwd()
glimpse(cl)
lme1 <- lmer(y ~ x + (1 | class_id), data = cl)
summary(lme1)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
classid = as.factor(rep(c(1:classrooms), each = students)),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
########################## 2. Fit Model ########################################
lme1 <- lmer(y ~ x + (1 | classid), data = cl)
summary(lme1)
# coefficient on x
coefficients(lme1)
# coefficient on x
coefficients(lme1)[x]
# coefficient on x
coefficients(lme1)[ ,x]
# coefficient on x
coefficients(lme1)[ , "x"]
# coefficient on x
coefficients(lme1)
# coefficient on x
coefficients(lme1)[ , 2]
# coefficient on x
coefficients(lme1)
# coefficient on x
summary(lme1)$coeffs
# coefficient on x
summary(lme1)$coefficients
# coefficient on x
summary(lme1)$coef
# coefficient on x
summary(lme1)$coeff
# coefficient on x
summary(lme1)$co
# coefficient on x
summary(lme1)$c
# coefficient on x
summary(lme1)$co
# coefficient on x
summary(lme1)$coef["x"]
# coefficient on x
summary(lme1)$coef["x",]
# coefficient on x
summary(lme1)$coef["x", "Estimate"]
coefficients(lme1)
# coefficient on x
summary(lme1)$coef["x", "Estimate"]
# coefficient on x
x_coef <- summary(lme1)$coef["x", "Estimate"]
x_coef
paste0("Coefficient: ", x_coef)
paste("Coefficient:", x_coef)
paste("Coefficient:", x_coef)
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
classid = as.factor(rep(c(1:classrooms), each = students)),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
########################## 2. Fit Model ########################################
lme1 <- lmer(y ~ x + (1 | classid), data = cl)
summary(lme1)
# coefficient on x
x_coef <- summary(lme1)$coef["x", "Estimate"]
paste("Coefficient:", x_coef)
# check 95% confidence band
library(dplyr)
library(lme4)
library(lmerTest)
set.seed(2042001)
######################## 1. Generate Simulated Data ############################
classrooms <- 100
# students per classroom
students <- 200
# generate simulated data
cl <- data.frame(
# predictor
x = runif(students * classrooms),
# classroom random effects
nu = rep(rnorm(classrooms, 0, 2), each = students),
classid = as.factor(rep(c(1:classrooms), each = students)),
# student error
epsilon = rnorm(students * classrooms, 0, 2)
) %>% mutate(y = x + nu + epsilon)
########################## 2. Fit Model ########################################
lme1 <- lmer(y ~ x + (1 | classid), data = cl)
summary(lme1)
# coefficient on x
x_coef <- summary(lme1)$coef["x", "Estimate"]
paste("Coefficient:", x_coef)
# check 95% confidence band
summary(lme1)
# check 95% confidence band
confint(lme1)
# check 95% confidence band
confint_ <- confint(lme1)
.98 + .049/sqrt(20000)
.98 + 1.96*.049/sqrt(20000)
lme1$coef[2, 1]
lme1$coef
sumary(lme1)$coef
summary(lme1)$coef
summary(lme1)$coef[2, 1]
class(lme1)
confint_
confint.merMod(lme1)
class(lme1)
# check 95% confidence band
confint_ <- confint.merMod(lme1)
class(confint_)
confint_["x", ]
class(confint_["x", ])
confint_["x", ]
paste("95% confidence interval:", confint_["x", ]_
paste("95% confidence interval:", confint_["x", ])
print(confint_["x", ])
print(confint_["x", ])
print("95% confidence interval:")
print(confint_["x", ])
paste("95% confidence interval:", confint_["x", ])
summary(cl$y)
summary(cl$x)
# make copy
cl2 <- cl1
# make copy
cl2 <- cl
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5))
rbinom(nrow(cl), 1, prob = .5)
table(rbinom(nrow(cl), 1, prob = .5))
table(rbinom(nrow(cl), 10, prob = .5))
table(rbinom(nrow(cl), 10, prob = .8))
table(rbinom(nrow(cl), 10, prob = .2))
hist(rbinom(nrow(cl), 10, prob = .2))
hist(rbinom(nrow(cl), 10, prob = .5))
hist(rbinom(nrow(cl), 10, prob = .8))
hist(rbinom(nrow(cl), 10, prob = .4))
hist(rbinom(nrow(cl), 10, prob = .5))
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = if_else(x == 1, NA, y))
colnames(cl2)
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = if_else(x == 1, NA, cl$y))
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = if_else(cl$x == 1, NA, cl$y))
?if_else
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = if_else(z == 1, NA, y))
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = if_else(z == 1, NA, cl$y))
colnames(y)
colnames(c)
colnames(cl)
if_else(cl$x == 1, NA, cl$y)
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = case_when(z == 1 ~NA, y))
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = case_when(z == 1 ~ NA, TRUE ~ y))
glimpse(cl)
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = ifelse(z == 1, NA, y))
cl2
cl2 %>% drop_na()
cl2 %>% tidyr::drop_na()
dim(cl2 %>% tidyr::drop_na())
dim(cl)
glimpse(cl2)
# make copy
cl2 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, prob = .5),
y = ifelse(z == 1, NA, y)) %>%
select(-z)
cl2
is.na(cl2)
!is.na(cl2)
library(tidyr)
summary(lme2)
lme2 <- lmer(y ~ x + (1 | classid), data = cl2)
summary(lme2)
lme2
attributes(lme2)
lme2$dat
lme2$data
summary(lme2)
x_coe
x_coef
# check 95% confidence band
confint2_ <- confint.merMod(lme2)
paste("95% confidence interval:", confint2_["x", ])
# The 95% confidence band does not cover the entire truth used to generate the data.
# DISCUSS
summary(cl2$x)
confint_
confint2_
# sample size for model 2
paste("Sample size for model 2:", "t")
# sample size for model 2
paste("Sample size for model 2:", nrow(cl2 %>% drop_na()))
cl3 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, x))
cl$x
hist(cl$x)
hist(cl$x)
hist(cl3$x)
hist(cl3$z)
table(cl3$z)
?rbinom
hist(rbinom(nrow(cl), 1, cl$x))
hist(cl$x)
summary(cl$x)
head(cl3)
head(cl3, 100)
tapply(cl3$x, cl3$z, summary)
tapply(cl3$x, cl3$z, hist)
tapply(cl3$x, cl3$z, hist)
cl3 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, x),
y = ifelse(z == 1, NA, y))
head(cl3, 100)
lme3 <- lmer(y ~ x + (1 | classid), data = cl3 %>% select(-z))
summary(lme3)
# check 95% confidence band
confint3_ <- confint.merMod(lme3)
paste("95% confidence interval:", confint3_["x", ])
confint_
confint2_
confint3_
# The 95% confidence band does not cover the entire truth used to generate the data.
# DISCUSS
# WHY DOES CI INCREASE AFTER APPLYING MAR
summary(cl3$x)
# sample size for model 3
paste("Sample size for model 2:", nrow(cl3 %>% drop_na()))
# sample size for model 2
paste("Sample size for model 2:", nrow(cl2 %>% drop_na()))
expit <- function(x) exp(x) / (1 + exp(x))
expit
plot(expit(1:100))
plot(expit(1:10000))
?vector
?seq
plot(expit(seq(0, 1, by = .001)))
seq(0, 1, by = .001)
plot(seq(0, 1, by = .001), expit(seq(0, 1, by = .001)))
cor(seq(0, 1, by = .001), expit(seq(0, 1, by = .001)))
expit(seq(0, 1, by = .001))
plot(expit(seq(0, 1, by = .001)))
cl3$y
hist(rbinom(nrow(cl), 1, cl$y))
hist(cl$y)
summary(cl$y)
cl4 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, y),
y = ifelse(z == 1, NA, y))
cl4
rbinom(nrow(cl), 1, cl$y)
summary(expit$y)
summary(cl$y)
expt(cl$y)
expit(cl$y)
summary(expit(cl$y))
cl4 <- cl %>%
mutate(z = rbinom(nrow(cl), 1, expit(y)),
y = ifelse(z == 1, NA, y))
cl4
cl4 %>% drop_na() %>% dim
lme4 <- lmer(y ~ x + (1 | class_id), data = cl4 %>% select(-z))
lme4 <- lmer(y ~ x + (1 | classid), data = cl4 %>% select(-z))
summary(lme4)
# check 95% confidence band
confint3_ <- confint.merMod(lme4)
paste("95% confidence interval:", confint4_["x", ])
# check 95% confidence band
confint4_ <- confint.merMod(lme4)
paste("95% confidence interval:", confint4_["x", ])
# The 95% confidence band does not cover the entire truth used to generate the data
# DISCUSS
# WHY DOES CI INCREASE AFTER APPLYING MAR
summary(cl4$x)
# sample size for model 4
paste("Sample size for model 4:", nrow(cl4 %>% drop_na()))
confint_
confint2_
confint3_
confint4_
# not run
setwd("C:/Users/apagta950/Documents/NYU/Courses/Spring 2021/MDML/Final Project/US-News-NLP/analysis")
library(anytime)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(tidyr)
library(tidytext)
library(topicmodels)
seed <- 14
# directories
figures_dir <- "../figures/"
data_dir <- "../data/"
# read news data
articles <- read_csv(paste0(data_dir, "news_all.csv"))  %>%
mutate(document = as.character(row_number()))
# filter out international Reuters sources
news_source_exclude <- c("Reuters Africa", "Reuters Australia",
"Reuters India", "Reuters UK", "Reuters.com")
# remove international Reuters articles
articles <- filter(articles, !articles.source_name %in% news_source_exclude)
p1
